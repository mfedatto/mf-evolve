// Generated by the command "dotnet new mfcc.contextbuilder.cocona" from MFedatto
// Namespace: Mf.Evolve.CrossCutting
// Context: Cli

using Cocona;
using Cocona.Builder;
using Mf.Evolve.CrossCutting.CompositionRoot;
using Mf.Evolve.CrossCutting.CompositionRoot.Extensions;
using Mf.Evolve.Domain.AppSettings;
using Mf.Evolve.Domain.Common;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Logging.Console;

namespace Mf.Evolve.CrossCutting;

/// <summary>
/// Provides configuration, installation, and binding logic for the CLI entry point, implementing the 
/// <see cref="Mf.Evolve.CrossCutting.CompositionRoot.IContextBuilderInstaller" />, 
/// <see cref="Mf.Evolve.CrossCutting.CompositionRoot.IContextBuilderAppConfigurator" />, and
/// <see cref="Mf.Evolve.CrossCutting.CompositionRoot.IContextBuilderConfigBinder" /> interfaces.
/// </summary>
public class CliContextBuilder : IContextBuilderInstaller, IContextBuilderAppConfigurator, IContextBuilderConfigBinder
{
	#region IContextBuilderConfigBinder

	/// <summary>
	/// Binds the application configuration to the specified CLI configuration type.
	/// </summary>
	/// <param name="builder">The <see cref="CoconaAppBuilder"/> instance for configuring the application.</param>
	/// <param name="configuration">The <see cref="IConfiguration"/> instance holding the application's configuration data.</param>
	public void BindConfig(
		CoconaAppBuilder builder,
		IConfiguration configuration)
	{
		builder.BindConfig<CliConfig>(configuration);
	}

	#endregion

	#region IContextBuilderInstaller

	/// <summary>
	/// Installs the necessary services and configurations into the specified <see cref="CoconaAppBuilder" />.
	/// </summary>
	/// <param name="builder">The <see cref="CoconaAppBuilder" /> instance to configure.</param>
	/// <param name="configuration">Optional configuration settings. Defaults to <c>null</c>.</param>
	public void Install(
		CoconaAppBuilder builder,
		IConfiguration? configuration = null)
	{
		ServiceProvider serviceProvider = builder.Services.BuildServiceProvider();
		CliConfig cliConfig = serviceProvider.GetService<CliConfig>()!;

		#region Logging Setup

		if (cliConfig.Logging.ClearProviders)
		{
			builder.Logging.ClearProviders();
		}

		if (cliConfig.Logging.AddSimpleConsole)
		{
			builder.Logging.AddSimpleConsole(options =>
			{
				options.IncludeScopes = cliConfig.Logging.IncludeScopes;
				options.TimestampFormat = cliConfig.Logging.TimestampFormat;
				options.SingleLine = cliConfig.Logging.SingleLine;

				if (cliConfig.Logging.EnabledLoggerColorBehavior)
				{
					options.ColorBehavior = LoggerColorBehavior.Enabled;
				}
			});
		}

		#endregion

		#region CancelationToken

		builder.Services.AddSingleton<CliCancellationToken>();

		#endregion
	}

	#endregion

	#region IContextBuilderAppConfigurator

	/// <summary>
	/// Configures the specified <see cref="CoconaApp" /> instance.
	/// </summary>
	/// <param name="app">The <see cref="CoconaApp" /> instance to configure.</param>
	/// <returns>The configured <see cref="CoconaApp" /> instance.</returns>
	public CoconaApp Configure(
		CoconaApp app)
	{
		if (!app.Environment.IsDevelopment())
		{
		}

		return app;
	}

	#endregion
}
